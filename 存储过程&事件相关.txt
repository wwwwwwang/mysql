存储过程or函数
创建存储过程，使用CREATE PROCEDURE语句，语法格式如下：
CREATE PROCEDURE proc_name ([proc_parameter]) [characteristics...] body

（1）CREATE PROCEDURE：创建存储过程关键字
（2）proc_name：存储过程名称
（3）proc_parameter：参数列表，可选，格式：[IN | OUT | INOUT] param_name type
IN：输入参数OUT：输出参数INOUT：既可以输入也可以输出param_name：参数名称type：参数类型，MySQL中的任意类型，如varchar等
（4）characteristics：指定存储过程特性，取值如下：
LANGUAGE SQL：说明body部分由SQL语句组成，LANGUAGE可选值只有SQL[NOT] DETERMINISTIC：指明存储过程执行结果是否确定。默认值：NOTDETERMINISTIC
DETERMINISTIC：结果确定，每次执行存储过程时，相同的输入会得到相同的输出
NOTDETERMINISTIC：结果不确定，相同输入可能得到不同输出。
{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQLDATA}：指定子程序使用存储过程的限制。默认值：CONTAINS SQL
CONTAINS SQL：说明子程序包含SQL语句，但是不包含写数据语句
NO SQL：说明子程序不包含SQL语句
READS SQL DATA：说明子程序包含读数据读数据语句
MODIFIES SQL DATA：说明子程序包含写数据语句
SQL SECURITY {DEFINER | INVOKER}：指明谁有权限执行，默认值：DEFINER
DEFINER：只有定义者才能执行
INVOKER：拥有权限的调用者才可以执行
COMMNET：注释信息
（5）body：SQL代码内容，可以使用BEGIN...END表示SQL代码的开始和技术
示例：
DELIMITER $$
CREATE PROCEDURE proc_countUser()
BEGIN
    SELECT COUNT(*) FROM t_user;
END $$

注：DELIMITER $ $：将MySQL的结束符置为$ $，因为MySQL默认语句结束符是';'，避免与存储过程中SQL语句冲突，使用DELIMITER改变存储过程结束符，以'END $$'结束存储过程。存储过程定义结束后，使用'DELIMITER ;'恢复默认结束符。也可以指定其他符号作为结束符

调用
CALL proc_name ([parameter[,...]])

删除
DROP {PROCEDURE | FUNCTION} [IF EXISTS] proc_name

DROP PROCEDURE  proc_countByName;
DROP PROCEDURE IF EXISTS proc_countByName;

修改
ALTER {PROCEDURE | FUNCTION} proc_or_func [characterustic...]

使用SHOW STATUS查看状态
SHOW {PROCEDURE | FUNCTION} STATUS [LIKE 'parttern']
SHOW PROCEDURE STATUS LIKE 'proc_%';

使用SHOW CREATE查看定义
SHOW CREATE {PROCEDURE | FUNCTION} proc_or_func
SHOW CREATE PROCEDURE proc_countByName;

从information_schema.Routines查看信息
SELECT * FROM information_schema.ROUTINES 
WHERE ROUTINE_NAME = 'proc_or_func'


查询数据库中的存储过程和函数
方法一：
 select `name` from mysql.proc where db = 'your_db_name' and `type` = 'PROCEDURE'   //存储过程
 select `name` from mysql.proc where db = 'your_db_name' and `type` = 'FUNCTION'   //函数
方法二：
 show procedure status; //存储过程
 show function status;     //函数

=========================================================================================
事件
查看
查询mysql.event表；
通过SHOW EVENTS命令；
通过SHOW FULL EVENTS命令；
通过查询information_schema.events表
SHOW CREATE EVENT。

基本语法
1.开启定时器
SHOW VARIABLES LIKE 'event_scheduler'; -- 开启定时器 0：off 1：on 
SET GLOBAL event_scheduler = 1; 
2.创建
CREATE EVENT 的语法如下：
CREATE EVENT
[IF NOT EXISTS] ---------------------------------------------*标注1
event_name -----------------------------------------------------*标注2
ON SCHEDULE schedule ------------------------------------*标注3 
[ON COMPLETION [NOT] PRESERVE] -----------------*标注4
[ENABLE | DISABLE] ----------------------------------------*标注5 
[COMMENT 'comment'] --------------------------------------*标注6 
DO sql_statement -----------------------------------------------*标注7
3.修改
ALTER EVENT
event_name

ON SCHEDULE schedule
[RENAME TO new_event_name]
[ON COMPLETION [NOT] PRESERVE]
[ENABLE | DISABLE]
[COMMENT 'comment']
DO sql_statement
4.删除
EVENT使用DROP EVENT语句来删除已经创建的事件，语法如下：
DROP EVENT [IF EXISTS] event_name


